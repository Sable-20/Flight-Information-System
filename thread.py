import socket, threading, os, json 
from urllib.request import urlretrieve

import myutils

class Thread:
    sock = None
    address = None
    api_key = None

    def __init__(self, s, add, api_key):
        self.sock = s
        self.address = add
        self.api_key = api_key

    def StartThread(self):
        thread = threading.Thread(target=self.ThreadFunctionality)
        thread.start()

    def ThreadFunctionality(self):
        myutils.SendMessage("connection accepted", self.sock)  # tell the client that server accepted the connection
        
        # allowing the client to recieve messages from the opened socket connection
        clientName = myutils.ReceiveMessage(self.sock)
        print(f"{clientName} has connected.")

        while True:

            # The JSON files are deleted everytime the user finishes
            # making a request and when the user ends connection then 
            # newer ones are generated by providing a new airport code.
            # This makes it so the flights are updated everytime the user 
            # is about to request newer information.

            airportCode = myutils.ReceiveMessage(self.sock)
            url = f"http://api.aviationstack.com/v1/flights?access_key={self.api_key}&limit=100&arr_icao={airportCode}"
            urlretrieve(url, f"./JSON/group_11_{clientName}.json")

            choice = myutils.ReceiveMessage(self.sock)

            # loggign when the client quites
            if choice == "quit":
                print(f"{clientName} has disconnected")
                os.remove(f"./JSON/group_11_{clientName}.json")
                break
            
            # opening log files
            with open(f"./JSON/group_11_{clientName}.json", 'r') as f:
                json_data = json.load(f)
            
            # logging if the client arrived / when + further info
            if choice == "arrived":
                msg = ""
                print(f"{clientName} has requested a list of all arrived flights.")

                for flight in json_data['data']:
                    # making sure hte flight has landed
                    if flight['flight_status'] == 'landed':
                        # formatting
                        msg +=  20*"-" + "\n" + \
                                "Flight IATA code:  {} \n".format(flight['flight']['iata']) + \
                                "Departure Airport: {} \n".format(flight['departure']['airport']) + \
                                "Arrival Time: {} \n".format(flight['arrival']['estimated']) + \
                                "Terminal: {} \n".format(flight['arrival']['terminal']) + \
                                "Gate: {} \n".format(flight['arrival']['gate'])
                msg += 20*"-" + "\n"

            # logging delayed info
            elif choice == "delayed":
                msg = ""
                print(f"{clientName} has requested a list of all delayed flights.")

                for flight in json_data['data']:
                    if flight['departure']['delay'] != None and int(flight['departure']['delay']) > 0:
                        msg +=  20*"-" + "\n" + \
                                "Flight IATA code: {} \n".format(flight['flight']['iata']) + \
                                "Departure Airport: {} \n".format(flight['departure']['airport']) + \
                                "Departure Scheduled Time: {} \n".format(flight['departure']['scheduled']) + \
                                "Estimated Arrival Time: {} \n".format(flight['arrival']['estimated']) + \
                                "Terminal: {} \n".format(flight['arrival']['terminal']) + \
                                "Gate: {} \n".format(flight['arrival']['gate'])
                msg += 20*"-" + "\n"

            # logging city info
            elif choice.startswith("city"):
                code = choice[5:]
                msg = ""
                print(f"{clientName} has requested a list of flights from {code}.")

                for flight in json_data['data']:
                    if flight['departure']['iata'] == code.upper():
                        msg +=  20*"-" + "\n" + \
                                "Flight IATA code: {}\n".format(flight['flight']['iata']) + \
                                "Departure Airport: {} \n".format(flight['departure']['airport']) + \
                                "Departure Time: {} \n".format(flight['departure']['scheduled']) + \
                                "Estimated Arrival Time: {} \n".format(flight['arrival']['estimated']) + \
                                "Terminal: {} \n".format(flight['arrival']['terminal']) + \
                                "Gate: {} \n".format(flight['arrival']['gate'])
                msg += 20*"-" + "\n"

            # more formatting if its the details
            elif choice.startswith("details"):
                code = choice[8:]
                msg = ""
                print(f"{clientName} has requested details of flight {code}.")

                for flight in json_data['data']:
                    
                    if flight['flight']['iata'] == code.upper():
                        msg +=  20*"-" + "\n" + \
                                "Flight IATA code: {}\n".format(flight['flight']['iata']) + \
                                "Flight Date: {}\n".format(flight['flight_date']) + \
                                "Departure:\n" + \
                                    "\tAirport: {}\n".format(flight['departure']['airport']) + \
                                    "\tGate: {}\n".format(flight['departure']['gate']) + \
                                    "\tTerminal: {}\n".format(flight['departure']['terminal']) + \
                                "Arrival:\n" + \
                                    "\tAirport: {}\n".format(flight['arrival']['airport']) + \
                                    "\tGate: {}\n".format(flight['arrival']['gate']) + \
                                    "\tTerminal: {}\n".format(flight['arrival']['terminal']) + \
                                "Flight Status: {}\n".format(flight['flight_status']) + \
                                "Scheduled Departure Time: {}\n".format(flight['departure']['scheduled']) + \
                                "Scheduled Arrival Time: {}\n".format(flight['arrival']['scheduled']) + \
                                "Estimated Arrival Time: {}\n".format(flight['arrival']['estimated']) + \
                                "Delay: {} minutes\n".format(flight['departure']['delay'])
                        break
                msg += 20*"-" + "\n"
            
            myutils.SendMessage(msg, self.sock)

            os.remove(f"./JSON/group_11_{clientName}.json")